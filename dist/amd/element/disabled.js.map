{"version":3,"sources":["../../src/element/disabled.js"],"names":["context","disabledState","supports","element","label","Boolean","currentState","hasAttribute","runningAsGetter","arguments","length","disabled","setElementDisabled","disabledFocus","logger","warn","disableTabindex","tabIndex","attribute","temporaryValue","saveValue","disableVideoControls","remove","disableSvgFocusable","undefined","disableSvgLink","setAriaDisabled","disableScriptFocus","focus","disablePointerEvents","pointerEvents","style","setAttribute","getAttribute","removeAttribute","nodeName","toLowerCase","ownerSVGElement","focusSvgFocusableAttribute","focusSvgTabindexAttribute"],"mappings":"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","file":"disabled.js","sourcesContent":["\n/*\n  Utility to make any element inert (disabled). Inert means the elements cannot be interacted\n  with and they cannot be focused via script, pointer or keyboard - and thus not receive focus.\n\n  Elements made inert (disabled) by this utility are given the attribute [data-ally-disabled=\"true\"].\n\n  ---------------\n\n  inert attribute was [removed](https://html5.org/r/8536) [tweet by steve](https://twitter.com/stevefaulkner/status/443075900201259008)\n  but definition of [inert subtrees](https://www.w3.org/html/wg/drafts/html/master/editing.html#inert-subtrees) remains.\n\n  [implementation idea by Vasilis](https://codepen.io/vasilisvg/pen/scowI)\n  [inert attribute polyfill by GoogleChrome](https://github.com/GoogleChrome/inert-polyfill)\n\n  [Gecko Bug: Inert Attribute](https://bugzilla.mozilla.org/show_bug.cgi?id=921504)\n  [Chromium Bug: Inert Attribute](https://code.google.com/p/chromium/issues/detail?id=269846)\n  [Chromium Bug: Inert Subtree](https://code.google.com/p/chromium/issues/detail?id=241699)\n  [WebKit Bug: Inert Subtree](https://bugs.webkit.org/show_bug.cgi?id=110952)\n*/\n\nimport contextToElement from '../util/context-to-element';\nimport tabindexValue from '../util/tabindex-value';\nimport isNativeDisabledSupported from '../is/native-disabled-supported';\nimport toggleAttribute from '../util/toggle-attribute';\nimport toggleAttributeValue from '../util/toggle-attribute-value';\nimport logger from '../util/logger';\n\nimport _supports from '../supports/supports';\nlet supports;\n\nfunction disabledFocus() {\n  logger.warn('trying to focus inert element', this);\n}\n\nfunction disableTabindex(element, disabledState) {\n  if (disabledState) {\n    const tabIndex = tabindexValue(element);\n    toggleAttributeValue({\n      element,\n      attribute: 'tabindex',\n      temporaryValue: '-1',\n      saveValue: tabIndex !== null ? tabIndex : '',\n    });\n  } else {\n    toggleAttributeValue({\n      element,\n      attribute: 'tabindex',\n    });\n  }\n}\n\nfunction disableVideoControls(element, disabledState) {\n  toggleAttribute({\n    element,\n    attribute: 'controls',\n    remove: disabledState,\n  });\n}\n\nfunction disableSvgFocusable(element, disabledState) {\n  toggleAttributeValue({\n    element,\n    attribute: 'focusable',\n    temporaryValue: disabledState ? 'false' : undefined,\n  });\n}\n\nfunction disableSvgLink(element, disabledState) {\n  toggleAttribute({\n    element,\n    attribute: 'xlink:href',\n    remove: disabledState,\n  });\n}\n\nfunction setAriaDisabled(element, disabledState) {\n  toggleAttributeValue({\n    element,\n    attribute: 'aria-disabled',\n    temporaryValue: disabledState ? 'true' : undefined,\n  });\n}\n\nfunction disableScriptFocus(element, disabledState) {\n  if (disabledState) {\n    // make sure no script can focus the element\n    element.focus = disabledFocus;\n  } else {\n    // restore original focus function from prototype\n    delete element.focus;\n  }\n}\n\nfunction disablePointerEvents(element, disabledState) {\n  if (disabledState) {\n    // remember previous pointer events status so we can restore it\n    const pointerEvents = element.style.pointerEvents || '';\n    element.setAttribute('data-inert-pointer-events', pointerEvents);\n    // make sure no pointer interaction can access the element\n    element.style.pointerEvents = 'none';\n  } else {\n    // restore to previous pointer interaction status\n    const pointerEvents = element.getAttribute('data-inert-pointer-events');\n    element.removeAttribute('data-inert-pointer-events');\n    element.style.pointerEvents = pointerEvents;\n  }\n}\n\nfunction setElementDisabled(element, disabledState) {\n  setAriaDisabled(element, disabledState);\n  disableTabindex(element, disabledState);\n  disableScriptFocus(element, disabledState);\n  disablePointerEvents(element, disabledState);\n\n  const nodeName = element.nodeName.toLowerCase();\n  if (nodeName === 'video' || nodeName === 'audio') {\n    // Blink and Gecko leave <video controls tabindex=\"-1\"> in document focus navigation sequence\n    // Blink leaves <audio controls tabindex=\"-1\"> in document focus navigation sequence\n    disableVideoControls(element, disabledState);\n  }\n\n  if (nodeName === 'svg' || element.ownerSVGElement) {\n    if (supports.focusSvgFocusableAttribute) {\n      // Internet Explorer knows focusable=\"false\" instead of tabindex=\"-1\"\n      disableSvgFocusable(element, disabledState);\n    } else if (!supports.focusSvgTabindexAttribute && nodeName === 'a') {\n      // Firefox neither knows focusable=\"false\" nor tabindex=\"-1\"\n      disableSvgLink(element, disabledState);\n    }\n  }\n\n  if (disabledState) {\n    element.setAttribute('data-ally-disabled', 'true');\n  } else {\n    element.removeAttribute('data-ally-disabled');\n  }\n}\n\nexport default function(context, disabledState) {\n  if (!supports) {\n    supports = _supports();\n  }\n\n  const element = contextToElement({\n    label: 'element/disabled',\n    context,\n  });\n\n  // accept truthy/falsy values\n  disabledState = Boolean(disabledState);\n  const currentState = element.hasAttribute('data-ally-disabled');\n  // if there's no value to set, we're running as a getter\n  const runningAsGetter = arguments.length === 1;\n\n  if (isNativeDisabledSupported(element)) {\n    if (runningAsGetter) {\n      return element.disabled;\n    }\n\n    // form elements know the disabled attribute, which we shall use instead of our poor man's copy of it\n    element.disabled = disabledState;\n    return element;\n  }\n\n  if (runningAsGetter) {\n    return currentState;\n  }\n\n  if (currentState === disabledState) {\n    // no update necessary\n    return element;\n  }\n\n  setElementDisabled(element, disabledState);\n  return element;\n}\n"]}
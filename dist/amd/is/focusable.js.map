{"version":3,"sources":["../../src/is/focusable.js"],"names":["supports","isOnlyFocusRelevant","element","nodeName","toLowerCase","_tabindex","shadowRoot","focusLabelTabindex","focusSvgFocusableAttribute","ownerSVGElement","focusableAttribute","getAttribute","hasAttribute","focusImgUsemapTabindex","isFocusableRules","context","except","disabled","visible","onlyTabbable","_isOnlyTabbable","isOnlyTabbable","rules","onlyFocusableBrowsingContext","label","resolveDocument","focusRelevant","isFocusRelevant","visibilityOptions","focusInHiddenIframe","browsingContext","focusObjectSvgHidden","cssVisibility","isVisible","frameElement","_nodeName","focusInZeroDimensionObject","offsetWidth","offsetHeight","focusSvgInIframe","isFocusable"],"mappings":"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","file":"focusable.js","sourcesContent":["\n// determine if an element can be focused\n\n// https://www.w3.org/TR/html5/editing.html#focus-management\n\n// NOTE: The following known issues exist:\n//   Gecko: `svg a[xlink|href]` is not identified as focusable (because SVGElement.prototype.focus is missing)\n//   Blink, WebKit: SVGElements that have been made focusable by adding a focus event listener are not identified as focusable\n\nimport isFocusRelevant from './focus-relevant';\nimport isValidArea from './valid-area';\nimport isVisible from './visible';\nimport isDisabled from './disabled';\nimport isOnlyTabbable from './only-tabbable';\nimport contextToElement from '../util/context-to-element';\nimport getFrameElement from '../util/get-frame-element';\nimport tabindexValue from '../util/tabindex-value';\n\nimport _supports from '../supports/supports';\nlet supports;\n\nfunction isOnlyFocusRelevant(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  if (nodeName === 'embed' || nodeName === 'keygen') {\n    // embed is considered focus-relevant but not focusable\n    // see https://github.com/medialize/ally.js/issues/82\n    return true;\n  }\n\n  const _tabindex = tabindexValue(element);\n  if (element.shadowRoot && _tabindex === null) {\n    // ShadowDOM host elements *may* receive focus\n    // even though they are not considered focuable\n    return true;\n  }\n\n  if (nodeName === 'label') {\n    // <label tabindex=\"0\"> is only tabbable in Firefox, not script-focusable\n    // there's no way to make an element focusable other than by adding a tabindex,\n    // and focus behavior of the label element seems hard-wired to ignore tabindex\n    // in some browsers (like Gecko, Blink and WebKit)\n    return !supports.focusLabelTabindex || _tabindex === null;\n  }\n\n  if (nodeName === 'legend') {\n    return _tabindex === null;\n  }\n\n  if (supports.focusSvgFocusableAttribute && (element.ownerSVGElement || nodeName === 'svg')) {\n    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2\n    const focusableAttribute = element.getAttribute('focusable');\n    return focusableAttribute && focusableAttribute === 'false';\n  }\n\n  if (nodeName === 'img' && element.hasAttribute('usemap')) {\n    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,\n    // it appears the tabindex is overruled so focus is still forwarded to the <map>\n    return _tabindex === null || !supports.focusImgUsemapTabindex;\n  }\n\n  if (nodeName === 'area') {\n    // all <area>s are considered relevant,\n    // but only the valid <area>s are focusable\n    return !isValidArea(element);\n  }\n\n  return false;\n}\n\nfunction isFocusableRules({\n  context,\n  except = {\n    disabled: false,\n    visible: false,\n    onlyTabbable: false,\n  },\n} = {}) {\n  if (!supports) {\n    supports = _supports();\n  }\n\n  const _isOnlyTabbable = isOnlyTabbable.rules.except({\n    onlyFocusableBrowsingContext: true,\n    visible: except.visible,\n  });\n\n  const element = contextToElement({\n    label: 'is/focusable',\n    resolveDocument: true,\n    context,\n  });\n\n  const focusRelevant = isFocusRelevant.rules({\n    context: element,\n    except,\n  });\n\n  if (!focusRelevant || isOnlyFocusRelevant(element)) {\n    return false;\n  }\n\n  if (!except.disabled && isDisabled(element)) {\n    return false;\n  }\n\n  if (!except.onlyTabbable && _isOnlyTabbable(element)) {\n    // some elements may be keyboard focusable, but not script focusable\n    return false;\n  }\n\n  // elements that are not rendered, cannot be focused\n  if (!except.visible) {\n    const visibilityOptions = {\n      context: element,\n      except: {},\n    };\n\n    if (supports.focusInHiddenIframe) {\n      // WebKit and Blink can focus content in hidden <iframe> and <object>\n      visibilityOptions.except.browsingContext = true;\n    }\n\n    if (supports.focusObjectSvgHidden) {\n      // Blink allows focusing the object element, even if it has visibility: hidden;\n      // @browser-issue Blink https://code.google.com/p/chromium/issues/detail?id=586191\n      const nodeName = element.nodeName.toLowerCase();\n      if (nodeName === 'object') {\n        visibilityOptions.except.cssVisibility = true;\n      }\n    }\n\n    if (!isVisible.rules(visibilityOptions)) {\n      return false;\n    }\n  }\n\n  const frameElement = getFrameElement(element);\n  if (frameElement) {\n    const _nodeName = frameElement.nodeName.toLowerCase();\n    if (_nodeName === 'object' && !supports.focusInZeroDimensionObject) {\n      if (!frameElement.offsetWidth || !frameElement.offsetHeight) {\n        // WebKit can not focus content in <object> if it doesn't have dimensions\n        return false;\n      }\n    }\n  }\n\n  const nodeName = element.nodeName.toLowerCase();\n  if (nodeName === 'svg' && supports.focusSvgInIframe && !frameElement && element.getAttribute('tabindex') === null) {\n    return false;\n  }\n\n  return true;\n}\n\n// bind exceptions to an iterator callback\nisFocusableRules.except = function(except = {}) {\n  const isFocusable = function(context) {\n    return isFocusableRules({\n      context,\n      except,\n    });\n  };\n\n  isFocusable.rules = isFocusableRules;\n  return isFocusable;\n};\n\n// provide isFocusRelevant(context) as default iterator callback\nconst isFocusable = isFocusableRules.except({});\nexport default isFocusable;\n"]}